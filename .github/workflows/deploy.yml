###############################################################################################
# AKS Deployment
###############################################################################################
#
#  Publishes an ARC environment to Azure Kubernetes Service (AKS) using Bicep templates.
#
#  Required Secrets
#  --------------------------
#    - AZURE_CLIENT_ID - Azure application Client ID for OIDC
#    - AZURE_TENANT_ID - Azure Entra ID tenant identifier
#    - AZURE_SUBSCRIPTION_ID - Azure subscription containing the resources
#
#  Required variables
#  --------------------------
#    - RESOURCE_GROUP: Target resource group for the AKS instance
#    - RESOURCE_GROUP_LOCATION: Target Azure region for the resource group and resources
#
###############################################################################################

name: AKS Deployment

on:
#  push:
#    branches: ["main"]
  workflow_dispatch:

# Configure least privileges
# - `id-token: write` allows the workflow to
#   create a token for OIDC authentication with Azure.
# - `contents: read` allows the workflow to
#   download the repository.

permissions:
  id-token: write
  contents: read

env:
  CLUSTER_NAME: arctest

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Execute a script using the Azure CLI. The script itself
      # is external so that it can be locally tested and verified
      - uses: azure/cli@v1
        id: azcli
        with:
          azcliversion: 2.36.0
          inlineScript: |
            #!/bin/bash

            ./scripts/deploy-aks.sh -r '${{ vars.RESOURCE_GROUP }}' -n '${{ env.CLUSTER_NAME }}' -l '${{ vars.RESOURCE_GROUP_LOCATION }}'

      # These actions could be used for most of the process, but instead I'm
      # using command line options via a script to make the process repeatable
      # and locally verifiable

      # Use kubelogin to configure your kubeconfig for Azure auth
      # - name: Set up kubelogin for non-interactive login
      #   uses: azure/use-kubelogin@v1
      #   with:
      #     kubelogin-version: 'v0.0.25'

      # # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      # - name: Get K8s context
      #   uses: azure/aks-set-context@v3
      #   with:
      #     resource-group: ${{ vars.RESOURCE_GROUP }}
      #     cluster-name: ${{ steps.azcli.outputs.CLUSTER_NAME }}
      #     admin: 'false'
      #     use-kubelogin: 'true'

      - run: ./scripts/deploy-helm.sh -r '${{ vars.RESOURCE_GROUP }}' -n '${{ steps.azcli.outputs.CLUSTER_NAME }}'
